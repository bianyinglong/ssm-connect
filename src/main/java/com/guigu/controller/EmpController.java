package com.guigu.controller;import com.github.pagehelper.PageHelper;import com.github.pagehelper.PageInfo;import com.guigu.mybatis.pojo.Emp;import com.guigu.service.EmpService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.*;import java.util.Arrays;import java.util.List;import java.util.Map;/** * @RestController 是@controller和@ResponseBody 的结合 * @Controller 将当前修饰的类注入SpringBoot IOC容器，使得从该类所在的项目跑起来的过程中，这个类就被实例化。 * @ResponseBody 它的作用简短截说就是指该类中所有的API接口返回的数据，甭管你对应的方法返回Map或是其他Object，它会以Json字符串的形式返回给客户端 */@RestController@CrossOrigin("*") // 设置跨域@RequestMapping("/emps")public class EmpController {    // 注意📢：类型是EmpService 不是EmpServiceImpl    @Autowired    private EmpService empService;    @GetMapping    public Result getAllEmp(            @RequestParam(value = "pageNum", defaultValue = "1") Integer pageNum,            @RequestParam(value = "pageSize", defaultValue = "10") Integer pageSize    ) {        PageHelper.startPage(pageNum, pageSize);        List<Emp> empList = empService.getAllEmpWithDept();        PageInfo empListWithPageInfo = new PageInfo<>(empList, 5);        Integer code = empList != null ? Code.SUCCESS : Code.ERROR;        String msg = empList != null ? "获取员工列表成功" : "获取员工列表失败";        return new Result(code, empListWithPageInfo, msg);    }    @GetMapping("/{id}")    public Result getEmpByEmpId(@PathVariable("id") Integer id) {        Emp emp = empService.getEmpByIdWithDept(id);        Integer code = emp != null ? Code.SUCCESS : Code.ERROR;        String msg = emp != null ? "获取员工信息成功！" : "获取员工信息失败！";        return new Result(code, emp, msg);    }    // 一定要设置@RequestBody，表示前端传递的数据来自请求体    @PostMapping    public Result insertEmp(@RequestBody Emp emp) {        System.out.println("emp===>" + emp);        boolean flag = empService.insertEmp(emp);        return new Result(flag ? Code.SUCCESS : Code.ERROR, flag);    }    @PutMapping("/{empId}")    public Result updateEmp(@PathVariable Integer empId, @RequestBody Emp emp) {        emp.setEmpId(empId);        boolean flag = empService.updateEmp(emp);        return new Result(flag ? Code.SUCCESS : Code.ERROR, flag);    }    @DeleteMapping("/{id}")    public Result deleteEmpById(@PathVariable("id") Integer id) {        boolean flag = empService.deleteEmpById(id);        return new Result(flag ? Code.SUCCESS : Code.ERROR, flag);    }    // 传递参数为数组，Map中的key即为传递的属性名称    @DeleteMapping("/batch")    public Result deleteByIds(@RequestBody Map<String, Integer[]> requestMap) {        boolean flag = empService.deleteEmpByIds(requestMap.get("ids"));        return new Result(flag ? Code.SUCCESS : Code.ERROR, flag);    }}